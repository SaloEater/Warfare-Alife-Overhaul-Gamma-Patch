function calculate_smart_types(smart)
    local types = {}

    if smart.props.base > 0 then
        table.insert(types, "st_wrfr_prop_base")
    end
    if smart.props.resource > 0 then
        table.insert(types, "st_wrfr_prop_resource")
    end
    if smart.props.territory > 0 then
        table.insert(types, "st_wrfr_prop_territory")
    end
    if smart.props.lair > 0 then
        table.insert(types, "st_wrfr_prop_lair")
    end

    for i, v in pairs(types) do
        types[i] = game.translate_string(v)
    end

    return table.concat(types, ", ")
end

-- Function to get defense timer remaining
function get_defense_timer(smart)
    if not smart_terrain_warfare.defense_timers or not smart_terrain_warfare.defense_timers[smart.id] then
        return ""
    end

    local defense_timer = smart_terrain_warfare.defense_timers[smart.id]
    local next_defense = smart_terrain_warfare.defense_next_update and smart_terrain_warfare.defense_next_update[smart.id] or 10

    local diff = game.get_game_time():diffSec(defense_timer)
    local remaining = (next_defense * 6) - diff

    if remaining <= 0 then
        return "Ready"
    elseif remaining <= 3600 then
        -- show in minutes if less than an hour left
        return string.format("%dm", math.floor(remaining / 60))
    else
        -- show in hours and minutes
        local hours = math.floor(remaining / 3600)
        local minutes = math.floor((remaining % 3600) / 60)
        return string.format("%dh %dm", hours, minutes)
    end
end

-- Function to get patrol timer remaining
function get_patrol_timer(smart)
    if not smart_terrain_warfare.patrol_timers or not smart_terrain_warfare.patrol_timers[smart.id] or not smart.owning_faction then
        return ""
    end

    if not warfare_options or not warfare_options.options or not warfare_options.options.factions or
            not warfare_options.options.factions[smart.owning_faction] or
            (warfare_options.options.factions[smart.owning_faction].max_patrol_squads or 0) <= 0 then
        return "Disabled"
    end

    local patrol_timer = smart_terrain_warfare.patrol_timers[smart.id]
    local next_patrol = smart_terrain_warfare.patrol_next_update[smart.id] or 10

    local diff = game.get_game_time():diffSec(patrol_timer)
    local remaining = (next_patrol * 6) - diff

    if remaining <= 0 then
        return "Ready"
    elseif remaining <= 3600 then
        -- show in minutes if less than an hour left
        return string.format("%dm", math.floor(remaining / 60))
    else
        -- show in hours and minutes
        local hours = math.floor(remaining / 3600)
        local minutes = math.floor((remaining % 3600) / 60)
        return string.format("%dh %dm", hours, minutes)
    end
end

-- Function to get target smarts count
function get_targets(smart)
    if not smart.target_smarts then
        return ""
    end

    local targets = {}
    for target, _ in pairs(smart.target_smarts) do
        local other = alife_object(target)

        if (other) then
            local otherWarfare = smart_terrain_warfare.translate_smart_name(other:name()) or other:name()
            table.insert(targets, otherWarfare)
        end
    end

    return table.concat(targets, ", ")
end

-- Function to get invasion information
function get_invasion_info(smart)
    if not smart_terrain_warfare.invasions or not smart_terrain_warfare.invasions[smart.id] then
        return "None"
    end

    local invasion_data = smart_terrain_warfare.invasions[smart.id]
    local other = invasion_data[1] and alife_object(invasion_data[1])
    local squad_count = invasion_data[2] or 0

    if other then
        local otherName = smart_terrain_warfare.translate_smart_name(other:name()) or other:name()
        return string.format("%s (%d)", otherName, squad_count)
    end

    return string.format("Unknown (%d)", squad_count)
end

function render()
    -- Add smarts-related UI elements here
    local level = game_graph():vertex(alife():actor().m_game_vertex_id):level_id()
    local currentLevelSmarts = warfare_levels.level_information[level].smarts

    if ImGui.BeginTable("WarfareSmarts", 11, 3, vector2(0, 0), 0) then
        -- 3 = Borders(1) + RowBg(2)
        ImGui.TableSetupColumn("ID", 2, 0, 0) -- 2 = WidthFixed
        ImGui.TableSetupColumn("Name", 2, 0, 0)
        ImGui.TableSetupColumn("Type", 2, 0, 0)
        ImGui.TableSetupColumn("Faction", 2, 0, 0)
        ImGui.TableSetupColumn("Defense", 2, 0, 0)
        ImGui.TableSetupColumn("Max Pop", 2, 0, 0)
        ImGui.TableSetupColumn("Defense Timer", 2, 0, 0)
        ImGui.TableSetupColumn("Patrol Timer", 2, 0, 0)
        ImGui.TableSetupColumn("Targets", 2, 0, 0)
        ImGui.TableSetupColumn("Invasion", 2, 0, 0)
        ImGui.TableSetupColumn("Under Attack", 2, 0, 0)

        ImGui.TableHeadersRow()

        for i = 1, #currentLevelSmarts do
            local smart_id = currentLevelSmarts[i]
            local smart = smart_id and alife_object(smart_id)
            if smart then
                ImGui.TableNextRow()

                ImGui.TableNextColumn()
                ImGui.Text(smart_id)

                ImGui.TableNextColumn()
                ImGui.Text(smart_terrain_warfare.translate_smart_name(smart:name()))

                ImGui.TableNextColumn()
                ImGui.Text(calculate_smart_types(smart))

                ImGui.TableNextColumn()
                ImGui.Text(game.translate_string(smart.owning_faction))

                ImGui.TableNextColumn()
                ImGui.Text(tostring(smart.defense_count or 0))

                ImGui.TableNextColumn()
                ImGui.Text(tostring(smart.max_population or 0))

                ImGui.TableNextColumn()
                ImGui.Text(get_defense_timer(smart))

                ImGui.TableNextColumn()
                ImGui.Text(get_patrol_timer(smart))

                ImGui.TableNextColumn()
                ImGui.Text(get_targets(smart))

                ImGui.TableNextColumn()
                ImGui.Text(get_invasion_info(smart))

                ImGui.TableNextColumn()
                ImGui.Text(smart_terrain_warfare.under_attack[smart.id] and "Yes" or "")
            end
        end

        ImGui.EndTable()
    end

    ImGui.End()
end